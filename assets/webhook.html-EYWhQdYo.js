import{_ as c,r as i,o as r,c as l,a as s,b as n,d as a,w as o,e as p}from"./app-WnBvREUy.js";const u={},d=s("h1",{id:"webhook",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#webhook","aria-hidden":"true"},"#"),n(" Webhook")],-1),k=s("p",null,"A webhook server for LINE messaging API is just a plain HTTP(S) server. When there is a observable user event, an HTTP request will be sent to a pre-configured webhook server.",-1),h={href:"https://developers.line.biz/en/reference/messaging-api/#webhooks",target:"_blank",rel:"noopener noreferrer"},b=s("h2",{id:"what-a-webhook-server-should-do",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#what-a-webhook-server-should-do","aria-hidden":"true"},"#"),n(" What a webhook server should do")],-1),v={href:"https://developers.line.biz/en/reference/messaging-api/#signature-validation",target:"_blank",rel:"noopener noreferrer"},m={href:"https://developers.line.biz/en/reference/messaging-api/#webhook-event-objects",target:"_blank",rel:"noopener noreferrer"},f=s("strong",null,"Signature validation",-1),w={href:"https://developers.line.biz/en/reference/messaging-api/#signature-validation",target:"_blank",rel:"noopener noreferrer"},g=s("code",null,"validateSignature()",-1),_=s("strong",null,"Webhook event object parsing",-1),y={href:"https://github.com/senchalabs/connect",target:"_blank",rel:"noopener noreferrer"},x=s("code",null,"middleware()",-1),T={href:"https://expressjs.com/",target:"_blank",rel:"noopener noreferrer"},j=s("h2",{id:"build-a-webhook-server-with-express",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#build-a-webhook-server-with-express","aria-hidden":"true"},"#"),n(" Build a webhook server with Express")],-1),S={href:"https://expressjs.com/",target:"_blank",rel:"noopener noreferrer"},E=p(`<p>We skip the detailed guide for Express. If more information is needed about Express, please refer to its documentation.</p><p>Here is an example of an HTTP server built with Express.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/webhook&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The server above listens to 8080 and will response with an empty object for <code>POST /webhook</code>. We will add webhook functionality to this server.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> middleware <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@line/bot-sdk&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>middleware

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">channelAccessToken</span><span class="token operator">:</span> <span class="token string">&#39;YOUR_CHANNEL_ACCESS_TOKEN&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">channelSecret</span><span class="token operator">:</span> <span class="token string">&#39;YOUR_CHANNEL_SECRET&#39;</span>
<span class="token punctuation">}</span>

app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/webhook&#39;</span><span class="token punctuation">,</span> <span class="token function">middleware</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>events <span class="token comment">// webhook event objects</span>
  req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>destination <span class="token comment">// user ID of the bot (optional)</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We have imported <code>middleware</code> from the package and make the Express app to use the middleware. The middlware validates the request and parses webhook event object. It embeds body-parser and parses them to objects. If you have a reason to use another body-parser separately for other routes, please keep in mind the followings.</p><h3 id="do-not-use-the-webhook-middleware-for-other-usual-routes" tabindex="-1"><a class="header-anchor" href="#do-not-use-the-webhook-middleware-for-other-usual-routes" aria-hidden="true">#</a> Do not use the webhook <code>middleware()</code> for other usual routes</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// don&#39;t</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">middleware</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// do</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;/webhook&#39;</span><span class="token punctuation">,</span> <span class="token function">middleware</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),q={href:"https://developers.line.biz/en/reference/messaging-api/#signature-validation",target:"_blank",rel:"noopener noreferrer"},N=p(`<h3 id="do-not-use-another-body-parser-before-the-webhook-middleware" tabindex="-1"><a class="header-anchor" href="#do-not-use-another-body-parser-before-the-webhook-middleware" aria-hidden="true">#</a> Do not use another body-parser before the webhook <code>middleware()</code></h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// don&#39;t</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;/webhook&#39;</span><span class="token punctuation">,</span> <span class="token function">middleware</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// do</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;/webhook&#39;</span><span class="token punctuation">,</span> <span class="token function">middleware</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If another body parser already parsed a request&#39;s body, the webhook middleware cannot access to the raw body of the request. The raw body should be retrieved for signature validation.</p>`,3),P=s("code",null,"req.body",-1),I={href:"https://firebase.google.com/docs/functions/http-events",target:"_blank",rel:"noopener noreferrer"},H=s("code",null,"validateSignature()",-1),O=p('<h2 id="error-handling" tabindex="-1"><a class="header-anchor" href="#error-handling" aria-hidden="true">#</a> Error handling</h2><p>There are two types of errors thrown by the middleware, one is <code>SignatureValidationFailed</code> and the other is <code>JSONParseError</code>.</p><ul><li><code>SignatureValidationFailed</code> is thrown when a request doesn&#39;t have a signature.</li><li><code>SignatureValidationFailed</code> is thrown when a request has a wrong signature.</li><li><code>JSONParseError</code> occurs when a request body cannot be parsed as JSON.</li></ul>',3),C={href:"https://github.com/senchalabs/connect#error-middleware",target:"_blank",rel:"noopener noreferrer"},L=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> middleware <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@line/bot-sdk&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>middleware
<span class="token keyword">const</span> JSONParseError <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@line/bot-sdk&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>JSONParseError
<span class="token keyword">const</span> SignatureValidationFailed <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@line/bot-sdk&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>SignatureValidationFailed

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">channelAccessToken</span><span class="token operator">:</span> <span class="token string">&#39;YOUR_CHANNEL_ACCESS_TOKEN&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">channelSecret</span><span class="token operator">:</span> <span class="token string">&#39;YOUR_CHANNEL_SECRET&#39;</span>
<span class="token punctuation">}</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">middleware</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/webhook&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>events<span class="token punctuation">)</span> <span class="token comment">// req.body will be webhook event object</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token keyword">instanceof</span> <span class="token class-name">SignatureValidationFailed</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>signature<span class="token punctuation">)</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token keyword">instanceof</span> <span class="token class-name">JSONParseError</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>raw<span class="token punctuation">)</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  <span class="token function">next</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token comment">// will throw default 500</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="https" tabindex="-1"><a class="header-anchor" href="#https" aria-hidden="true">#</a> HTTPS</h2>`,2),A={href:"https://expressjs.com/en/api.html#app.listen",target:"_blank",rel:"noopener noreferrer"},F={href:"https://www.nginx.com/",target:"_blank",rel:"noopener noreferrer"},V={href:"https://ngrok.com/",target:"_blank",rel:"noopener noreferrer"};function R(W,J){const e=i("ExternalLinkIcon"),t=i("RouterLink");return r(),l("div",null,[d,k,s("p",null,[n("About configuration of webhook itself, please refer to "),s("a",h,[n("Webhook"),a(e)]),n(" of the official document.")]),b,s("ul",null,[s("li",null,[s("a",v,[n("Signature validation"),a(e)])]),s("li",null,[s("a",m,[n("Webhook event object parsing"),a(e)])])]),s("p",null,[f,n(" is checking if a request is actually sent from real LINE servers, not a fraud. The validation is conducted by checking the "),s("a",w,[n("X-Line-Signature"),a(e)]),n(" header and request body. There is a "),a(t,{to:"/api-reference/validate-signature.html"},{default:o(()=>[g]),_:1}),n(" function to do this.")]),s("p",null,[_,n(" is literally parsing webhook event objects, which contains information of each webhook event. The objects are provided as request body in JSON format, so any body parser will work here. For interal object types in this SDK, please refer to "),a(t,{to:"/api-reference/message-and-event-objects.html"},{default:o(()=>[n("Message and event objects")]),_:1}),n(".")]),s("p",null,[n("There is a function to generate a "),s("a",y,[n("connect"),a(e)]),n(" middleware, "),a(t,{to:"/api-reference/middleware.html"},{default:o(()=>[x]),_:1}),n(", to conduct both of them. If your server can make use of connect middlewares, such as "),s("a",T,[n("Express"),a(e)]),n(", using the middleware is a recommended way to build a webhook server.")]),j,s("p",null,[s("a",S,[n("Express"),a(e)]),n(" is a minimal web framework for Node.js, which is widely used in Node.js communities. You can surely build a webhook server with any web framework, but we use Express as an example here for its popularity.")]),E,s("p",null,[n("The middleware will throw an exception when the "),s("a",q,[n("X-Line-Signature"),a(e)]),n(" header is not set. If you want to handle usual user requests, the middleware shouldn't be used for them.")]),N,s("p",null,[n("However, there are environments where "),P,n(" is pre-parsed, such as "),s("a",I,[n("Firebase Cloud Functions"),a(e)]),n(". If it parses the body into string or buffer, the middleware will use the body as it is and work just fine. If the pre-parsed body is an object, the webhook middleware will fail to work. In the case, please use "),a(t,{to:"/api-reference/validate-signature.html"},{default:o(()=>[H]),_:1}),n(" manually with raw body.")]),O,s("p",null,[n("For type references of the errors, please refer to "),a(t,{to:"/api-reference/exceptions.html"},{default:o(()=>[n("the API reference")]),_:1}),n(".")]),s("p",null,[n("The errors can be handled with "),s("a",C,[n("error middleware"),a(e)]),n(".")]),L,s("p",null,[n("The webhook URL should have HTTPS protocol. There are several ways to build an HTTPS server. For example, here is a "),s("a",A,[n("documentation"),a(e)]),n(" of making Express work with HTTPS. You can also set HTTPS in web servers like "),s("a",F,[n("NGINX"),a(e)]),n(". This guide will not cover HTTPS configuration, but do not forget to set HTTPS beforehand.")]),s("p",null,[n("For development and test usages, "),s("a",V,[n("ngrok"),a(e)]),n(" works perfectly.")])])}const z=c(u,[["render",R],["__file","webhook.html.vue"]]);export{z as default};
