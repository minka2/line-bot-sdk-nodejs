import{_ as l,r as s,o as r,c,a as e,d as n,w as d,b as t,e as o}from"./app-767RosGT.js";const u={},h=e("h1",{id:"class-manageaudienceblobclient",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#class-manageaudienceblobclient","aria-hidden":"true"},"#"),t(" Class: ManageAudienceBlobClient")],-1),p=e("h2",{id:"table-of-contents",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#table-of-contents","aria-hidden":"true"},"#"),t(" Table of contents")],-1),f=e("h3",{id:"constructors",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#constructors","aria-hidden":"true"},"#"),t(" Constructors")],-1),_=e("h3",{id:"methods",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#methods","aria-hidden":"true"},"#"),t(" Methods")],-1),g=e("h2",{id:"constructors-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#constructors-1","aria-hidden":"true"},"#"),t(" Constructors")],-1),b=e("h3",{id:"constructor",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#constructor","aria-hidden":"true"},"#"),t(" constructor")],-1),m=e("strong",null,"new ManageAudienceBlobClient",-1),x=e("code",null,"config",-1),A=e("code",null,"ManageAudienceBlobClient",-1),y=o('<h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>config</code></td><td style="text-align:left;"><code>httpClientConfig</code></td></tr></tbody></table><h4 id="returns" tabindex="-1"><a class="header-anchor" href="#returns" aria-hidden="true">#</a> Returns</h4>',3),C=e("code",null,"ManageAudienceBlobClient",-1),I=e("h4",{id:"defined-in",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in","aria-hidden":"true"},"#"),t(" Defined in")],-1),B={href:"https://github.com/line/line-bot-sdk-nodejs/blob/e92f866/lib/manage-audience/api/manageAudienceBlobClient.ts#L36",target:"_blank",rel:"noopener noreferrer"},M=e("h2",{id:"methods-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#methods-1","aria-hidden":"true"},"#"),t(" Methods")],-1),D=e("h3",{id:"adduseridstoaudience",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#adduseridstoaudience","aria-hidden":"true"},"#"),t(" addUserIdsToAudience")],-1),T=e("strong",null,"addUserIdsToAudience",-1),k=e("code",null,"file",-1),U=e("code",null,"audienceGroupId?",-1),P=e("code",null,"uploadDescription?",-1),R=e("code",null,"Promise",-1),N=e("code",null,"MessageAPIResponseBase",-1),v=o('<p>Add user IDs or Identifiers for Advertisers (IFAs) to an audience for uploading user IDs (by file).</p><h4 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>file</code></td><td style="text-align:left;"><code>Blob</code></td><td style="text-align:left;">A text file with one user ID or IFA entered per line. Specify text/plain as Content-Type. Max file number: 1 Max number: 1,500,000</td></tr><tr><td style="text-align:left;"><code>audienceGroupId?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">The audience ID.</td></tr><tr><td style="text-align:left;"><code>uploadDescription?</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">The description to register with the job</td></tr></tbody></table><h4 id="returns-1" tabindex="-1"><a class="header-anchor" href="#returns-1" aria-hidden="true">#</a> Returns</h4>',4),F=e("code",null,"Promise",-1),L=e("code",null,"MessageAPIResponseBase",-1),j=e("p",null,[e("strong",null,[e("code",null,"See")])],-1),w=e("p",null,[e("a",{href:"https://developers.line.biz/en/reference/messaging-api/#update-upload-audience-group-by-file"}," Documentation")],-1),E=e("h4",{id:"defined-in-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-1","aria-hidden":"true"},"#"),t(" Defined in")],-1),S={href:"https://github.com/line/line-bot-sdk-nodejs/blob/e92f866/lib/manage-audience/api/manageAudienceBlobClient.ts#L69",target:"_blank",rel:"noopener noreferrer"},G=e("hr",null,null,-1),V=e("h3",{id:"createaudienceforuploadinguserids",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#createaudienceforuploadinguserids","aria-hidden":"true"},"#"),t(" createAudienceForUploadingUserIds")],-1),z=e("strong",null,"createAudienceForUploadingUserIds",-1),q=e("code",null,"file",-1),H=e("code",null,"description?",-1),J=e("code",null,"isIfaAudience?",-1),K=e("code",null,"uploadDescription?",-1),O=e("code",null,"Promise",-1),Q=e("code",null,"CreateAudienceGroupResponse",-1),W=o('<p>Create audience for uploading user IDs (by file).</p><h4 id="parameters-2" tabindex="-1"><a class="header-anchor" href="#parameters-2" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>file</code></td><td style="text-align:left;"><code>Blob</code></td><td style="text-align:left;">A text file with one user ID or IFA entered per line. Specify text/plain as Content-Type. Max file number: 1 Max number: 1,500,000</td></tr><tr><td style="text-align:left;"><code>description?</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">The audience\\&#39;s name. This is case-insensitive, meaning AUDIENCE and audience are considered identical. Max character limit: 120</td></tr><tr><td style="text-align:left;"><code>isIfaAudience?</code></td><td style="text-align:left;"><code>boolean</code></td><td style="text-align:left;">To specify recipients by IFAs: set <code>true</code>. To specify recipients by user IDs: set <code>false</code> or omit isIfaAudience property.</td></tr><tr><td style="text-align:left;"><code>uploadDescription?</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">The description to register for the job (in <code>jobs[].description</code>).</td></tr></tbody></table><h4 id="returns-2" tabindex="-1"><a class="header-anchor" href="#returns-2" aria-hidden="true">#</a> Returns</h4>',4),X=e("code",null,"Promise",-1),Y=e("code",null,"CreateAudienceGroupResponse",-1),Z=e("p",null,[e("strong",null,[e("code",null,"See")])],-1),$=e("p",null,[e("a",{href:"https://developers.line.biz/en/reference/messaging-api/#create-upload-audience-group-by-file"}," Documentation")],-1),ee=e("h4",{id:"defined-in-2",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-2","aria-hidden":"true"},"#"),t(" Defined in")],-1),te={href:"https://github.com/line/line-bot-sdk-nodejs/blob/e92f866/lib/manage-audience/api/manageAudienceBlobClient.ts#L94",target:"_blank",rel:"noopener noreferrer"};function ne(ae,de){const a=s("RouterLink"),i=s("ExternalLinkIcon");return r(),c("div",null,[e("p",null,[n(a,{to:"/apidocs/"},{default:d(()=>[t("@line/bot-sdk")]),_:1}),t(" / "),n(a,{to:"/apidocs/modules.html"},{default:d(()=>[t("Exports")]),_:1}),t(" / "),n(a,{to:"/apidocs/modules/manageAudience.html"},{default:d(()=>[t("manageAudience")]),_:1}),t(" / ManageAudienceBlobClient")]),h,e("p",null,[n(a,{to:"/apidocs/modules/manageAudience.html"},{default:d(()=>[t("manageAudience")]),_:1}),t(".ManageAudienceBlobClient")]),p,f,e("ul",null,[e("li",null,[n(a,{to:"/apidocs/classes/manageAudience.ManageAudienceBlobClient.html#constructor"},{default:d(()=>[t("constructor")]),_:1})])]),_,e("ul",null,[e("li",null,[n(a,{to:"/apidocs/classes/manageAudience.ManageAudienceBlobClient.html#adduseridstoaudience"},{default:d(()=>[t("addUserIdsToAudience")]),_:1})]),e("li",null,[n(a,{to:"/apidocs/classes/manageAudience.ManageAudienceBlobClient.html#createaudienceforuploadinguserids"},{default:d(()=>[t("createAudienceForUploadingUserIds")]),_:1})])]),g,b,e("p",null,[t("• "),m,t("("),x,t("): "),n(a,{to:"/apidocs/classes/manageAudience.ManageAudienceBlobClient.html"},{default:d(()=>[A]),_:1})]),y,e("p",null,[n(a,{to:"/apidocs/classes/manageAudience.ManageAudienceBlobClient.html"},{default:d(()=>[C]),_:1})]),I,e("p",null,[e("a",B,[t("lib/manage-audience/api/manageAudienceBlobClient.ts:36"),n(i)])]),M,D,e("p",null,[t("▸ "),T,t("("),k,t(", "),U,t(", "),P,t("): "),R,t("<"),n(a,{to:"/apidocs/modules.html#messageapiresponsebase"},{default:d(()=>[N]),_:1}),t(">")]),v,e("p",null,[F,t("<"),n(a,{to:"/apidocs/modules.html#messageapiresponsebase"},{default:d(()=>[L]),_:1}),t(">")]),j,w,E,e("p",null,[e("a",S,[t("lib/manage-audience/api/manageAudienceBlobClient.ts:69"),n(i)])]),G,V,e("p",null,[t("▸ "),z,t("("),q,t(", "),H,t(", "),J,t(", "),K,t("): "),O,t("<"),n(a,{to:"/apidocs/modules/manageAudience.html#createaudiencegroupresponse"},{default:d(()=>[Q]),_:1}),t(">")]),W,e("p",null,[X,t("<"),n(a,{to:"/apidocs/modules/manageAudience.html#createaudiencegroupresponse"},{default:d(()=>[Y]),_:1}),t(">")]),Z,$,ee,e("p",null,[e("a",te,[t("lib/manage-audience/api/manageAudienceBlobClient.ts:94"),n(i)])])])}const oe=l(u,[["render",ne],["__file","manageAudience.ManageAudienceBlobClient.html.vue"]]);export{oe as default};
