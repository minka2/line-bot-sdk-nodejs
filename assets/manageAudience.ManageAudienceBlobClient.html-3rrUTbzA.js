import{_ as l,r as s,o as r,c,a as e,d as n,w as i,b as t,e as o}from"./app-7MVaQ_fo.js";const u={},h=e("h1",{id:"class-manageaudienceblobclient",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#class-manageaudienceblobclient","aria-hidden":"true"},"#"),t(" Class: ManageAudienceBlobClient")],-1),p=e("h2",{id:"table-of-contents",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#table-of-contents","aria-hidden":"true"},"#"),t(" Table of contents")],-1),f=e("h3",{id:"constructors",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#constructors","aria-hidden":"true"},"#"),t(" Constructors")],-1),_=e("h3",{id:"methods",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#methods","aria-hidden":"true"},"#"),t(" Methods")],-1),g=e("h2",{id:"constructors-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#constructors-1","aria-hidden":"true"},"#"),t(" Constructors")],-1),b=e("h3",{id:"constructor",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#constructor","aria-hidden":"true"},"#"),t(" constructor")],-1),m=e("strong",null,"new ManageAudienceBlobClient",-1),x=e("code",null,"config",-1),y=e("code",null,"ManageAudienceBlobClient",-1),A=o('<h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>config</code></td><td style="text-align:left;"><code>httpClientConfig</code></td></tr></tbody></table><h4 id="returns" tabindex="-1"><a class="header-anchor" href="#returns" aria-hidden="true">#</a> Returns</h4>',3),I=e("code",null,"ManageAudienceBlobClient",-1),C=e("h4",{id:"defined-in",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in","aria-hidden":"true"},"#"),t(" Defined in")],-1),T={href:"https://github.com/line/line-bot-sdk-nodejs/blob/1bccab7/lib/manage-audience/api/manageAudienceBlobClient.ts#L35",target:"_blank",rel:"noopener noreferrer"},D=e("h2",{id:"methods-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#methods-1","aria-hidden":"true"},"#"),t(" Methods")],-1),B=e("h3",{id:"adduseridstoaudience",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#adduseridstoaudience","aria-hidden":"true"},"#"),t(" addUserIdsToAudience")],-1),M=e("strong",null,"addUserIdsToAudience",-1),R=e("code",null,"file",-1),U=e("code",null,"audienceGroupId?",-1),k=e("code",null,"uploadDescription?",-1),P=e("code",null,"Promise",-1),w=e("code",null,"MessageAPIResponseBase",-1),F=o('<p>Add user IDs or Identifiers for Advertisers (IFAs) to an audience for uploading user IDs (by file).</p><h4 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>file</code></td><td style="text-align:left;"><code>Blob</code></td><td style="text-align:left;">A text file with one user ID or IFA entered per line. Specify text/plain as Content-Type. Max file number: 1 Max number: 1,500,000</td></tr><tr><td style="text-align:left;"><code>audienceGroupId?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">The audience ID.</td></tr><tr><td style="text-align:left;"><code>uploadDescription?</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">The description to register with the job</td></tr></tbody></table><h4 id="returns-1" tabindex="-1"><a class="header-anchor" href="#returns-1" aria-hidden="true">#</a> Returns</h4>',4),j=e("code",null,"Promise",-1),v=e("code",null,"MessageAPIResponseBase",-1),N=e("p",null,[e("strong",null,[e("code",null,"See")])],-1),L=e("p",null,[e("a",{href:"https://developers.line.biz/en/reference/messaging-api/#update-upload-audience-group-by-file"}," Documentation")],-1),S=e("h4",{id:"defined-in-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-1","aria-hidden":"true"},"#"),t(" Defined in")],-1),E={href:"https://github.com/line/line-bot-sdk-nodejs/blob/1bccab7/lib/manage-audience/api/manageAudienceBlobClient.ts#L68",target:"_blank",rel:"noopener noreferrer"},G=e("hr",null,null,-1),H=e("h3",{id:"adduseridstoaudiencewithhttpinfo",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#adduseridstoaudiencewithhttpinfo","aria-hidden":"true"},"#"),t(" addUserIdsToAudienceWithHttpInfo")],-1),W=e("strong",null,"addUserIdsToAudienceWithHttpInfo",-1),z=e("code",null,"file",-1),V=e("code",null,"audienceGroupId?",-1),q=e("code",null,"uploadDescription?",-1),J=e("code",null,"Promise",-1),K=e("code",null,"ApiResponseType",-1),O=e("code",null,"MessageAPIResponseBase",-1),Q=o('<p>Add user IDs or Identifiers for Advertisers (IFAs) to an audience for uploading user IDs (by file).. This method includes HttpInfo object to return additional information.</p><h4 id="parameters-2" tabindex="-1"><a class="header-anchor" href="#parameters-2" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>file</code></td><td style="text-align:left;"><code>Blob</code></td><td style="text-align:left;">A text file with one user ID or IFA entered per line. Specify text/plain as Content-Type. Max file number: 1 Max number: 1,500,000</td></tr><tr><td style="text-align:left;"><code>audienceGroupId?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">The audience ID.</td></tr><tr><td style="text-align:left;"><code>uploadDescription?</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">The description to register with the job</td></tr></tbody></table><h4 id="returns-2" tabindex="-1"><a class="header-anchor" href="#returns-2" aria-hidden="true">#</a> Returns</h4>',4),X=e("code",null,"Promise",-1),Y=e("code",null,"ApiResponseType",-1),Z=e("code",null,"MessageAPIResponseBase",-1),$=e("p",null,[e("strong",null,[e("code",null,"See")])],-1),ee=e("p",null,[e("a",{href:"https://developers.line.biz/en/reference/messaging-api/#update-upload-audience-group-by-file"}," Documentation")],-1),te=e("h4",{id:"defined-in-2",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-2","aria-hidden":"true"},"#"),t(" Defined in")],-1),ne={href:"https://github.com/line/line-bot-sdk-nodejs/blob/1bccab7/lib/manage-audience/api/manageAudienceBlobClient.ts#L91",target:"_blank",rel:"noopener noreferrer"},de=e("hr",null,null,-1),ie=e("h3",{id:"createaudienceforuploadinguserids",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#createaudienceforuploadinguserids","aria-hidden":"true"},"#"),t(" createAudienceForUploadingUserIds")],-1),ae=e("strong",null,"createAudienceForUploadingUserIds",-1),oe=e("code",null,"file",-1),se=e("code",null,"description?",-1),le=e("code",null,"isIfaAudience?",-1),re=e("code",null,"uploadDescription?",-1),ce=e("code",null,"Promise",-1),ue=e("code",null,"CreateAudienceGroupResponse",-1),he=o('<p>Create audience for uploading user IDs (by file).</p><h4 id="parameters-3" tabindex="-1"><a class="header-anchor" href="#parameters-3" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>file</code></td><td style="text-align:left;"><code>Blob</code></td><td style="text-align:left;">A text file with one user ID or IFA entered per line. Specify text/plain as Content-Type. Max file number: 1 Max number: 1,500,000</td></tr><tr><td style="text-align:left;"><code>description?</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">The audience\\&#39;s name. This is case-insensitive, meaning AUDIENCE and audience are considered identical. Max character limit: 120</td></tr><tr><td style="text-align:left;"><code>isIfaAudience?</code></td><td style="text-align:left;"><code>boolean</code></td><td style="text-align:left;">To specify recipients by IFAs: set <code>true</code>. To specify recipients by user IDs: set <code>false</code> or omit isIfaAudience property.</td></tr><tr><td style="text-align:left;"><code>uploadDescription?</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">The description to register for the job (in <code>jobs[].description</code>).</td></tr></tbody></table><h4 id="returns-3" tabindex="-1"><a class="header-anchor" href="#returns-3" aria-hidden="true">#</a> Returns</h4>',4),pe=e("code",null,"Promise",-1),fe=e("code",null,"CreateAudienceGroupResponse",-1),_e=e("p",null,[e("strong",null,[e("code",null,"See")])],-1),ge=e("p",null,[e("a",{href:"https://developers.line.biz/en/reference/messaging-api/#create-upload-audience-group-by-file"}," Documentation")],-1),be=e("h4",{id:"defined-in-3",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-3","aria-hidden":"true"},"#"),t(" Defined in")],-1),me={href:"https://github.com/line/line-bot-sdk-nodejs/blob/1bccab7/lib/manage-audience/api/manageAudienceBlobClient.ts#L116",target:"_blank",rel:"noopener noreferrer"},xe=e("hr",null,null,-1),ye=e("h3",{id:"createaudienceforuploadinguseridswithhttpinfo",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#createaudienceforuploadinguseridswithhttpinfo","aria-hidden":"true"},"#"),t(" createAudienceForUploadingUserIdsWithHttpInfo")],-1),Ae=e("strong",null,"createAudienceForUploadingUserIdsWithHttpInfo",-1),Ie=e("code",null,"file",-1),Ce=e("code",null,"description?",-1),Te=e("code",null,"isIfaAudience?",-1),De=e("code",null,"uploadDescription?",-1),Be=e("code",null,"Promise",-1),Me=e("code",null,"ApiResponseType",-1),Re=e("code",null,"CreateAudienceGroupResponse",-1),Ue=o('<p>Create audience for uploading user IDs (by file).. This method includes HttpInfo object to return additional information.</p><h4 id="parameters-4" tabindex="-1"><a class="header-anchor" href="#parameters-4" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>file</code></td><td style="text-align:left;"><code>Blob</code></td><td style="text-align:left;">A text file with one user ID or IFA entered per line. Specify text/plain as Content-Type. Max file number: 1 Max number: 1,500,000</td></tr><tr><td style="text-align:left;"><code>description?</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">The audience\\&#39;s name. This is case-insensitive, meaning AUDIENCE and audience are considered identical. Max character limit: 120</td></tr><tr><td style="text-align:left;"><code>isIfaAudience?</code></td><td style="text-align:left;"><code>boolean</code></td><td style="text-align:left;">To specify recipients by IFAs: set <code>true</code>. To specify recipients by user IDs: set <code>false</code> or omit isIfaAudience property.</td></tr><tr><td style="text-align:left;"><code>uploadDescription?</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">The description to register for the job (in <code>jobs[].description</code>).</td></tr></tbody></table><h4 id="returns-4" tabindex="-1"><a class="header-anchor" href="#returns-4" aria-hidden="true">#</a> Returns</h4>',4),ke=e("code",null,"Promise",-1),Pe=e("code",null,"ApiResponseType",-1),we=e("code",null,"CreateAudienceGroupResponse",-1),Fe=e("p",null,[e("strong",null,[e("code",null,"See")])],-1),je=e("p",null,[e("a",{href:"https://developers.line.biz/en/reference/messaging-api/#create-upload-audience-group-by-file"}," Documentation")],-1),ve=e("h4",{id:"defined-in-4",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#defined-in-4","aria-hidden":"true"},"#"),t(" Defined in")],-1),Ne={href:"https://github.com/line/line-bot-sdk-nodejs/blob/1bccab7/lib/manage-audience/api/manageAudienceBlobClient.ts#L142",target:"_blank",rel:"noopener noreferrer"};function Le(Se,Ee){const d=s("RouterLink"),a=s("ExternalLinkIcon");return r(),c("div",null,[e("p",null,[n(d,{to:"/apidocs/"},{default:i(()=>[t("@line/bot-sdk")]),_:1}),t(" / "),n(d,{to:"/apidocs/modules.html"},{default:i(()=>[t("Exports")]),_:1}),t(" / "),n(d,{to:"/apidocs/modules/manageAudience.html"},{default:i(()=>[t("manageAudience")]),_:1}),t(" / ManageAudienceBlobClient")]),h,e("p",null,[n(d,{to:"/apidocs/modules/manageAudience.html"},{default:i(()=>[t("manageAudience")]),_:1}),t(".ManageAudienceBlobClient")]),p,f,e("ul",null,[e("li",null,[n(d,{to:"/apidocs/classes/manageAudience.ManageAudienceBlobClient.html#constructor"},{default:i(()=>[t("constructor")]),_:1})])]),_,e("ul",null,[e("li",null,[n(d,{to:"/apidocs/classes/manageAudience.ManageAudienceBlobClient.html#adduseridstoaudience"},{default:i(()=>[t("addUserIdsToAudience")]),_:1})]),e("li",null,[n(d,{to:"/apidocs/classes/manageAudience.ManageAudienceBlobClient.html#adduseridstoaudiencewithhttpinfo"},{default:i(()=>[t("addUserIdsToAudienceWithHttpInfo")]),_:1})]),e("li",null,[n(d,{to:"/apidocs/classes/manageAudience.ManageAudienceBlobClient.html#createaudienceforuploadinguserids"},{default:i(()=>[t("createAudienceForUploadingUserIds")]),_:1})]),e("li",null,[n(d,{to:"/apidocs/classes/manageAudience.ManageAudienceBlobClient.html#createaudienceforuploadinguseridswithhttpinfo"},{default:i(()=>[t("createAudienceForUploadingUserIdsWithHttpInfo")]),_:1})])]),g,b,e("p",null,[t("• "),m,t("("),x,t("): "),n(d,{to:"/apidocs/classes/manageAudience.ManageAudienceBlobClient.html"},{default:i(()=>[y]),_:1})]),A,e("p",null,[n(d,{to:"/apidocs/classes/manageAudience.ManageAudienceBlobClient.html"},{default:i(()=>[I]),_:1})]),C,e("p",null,[e("a",T,[t("lib/manage-audience/api/manageAudienceBlobClient.ts:35"),n(a)])]),D,B,e("p",null,[t("▸ "),M,t("("),R,t(", "),U,t(", "),k,t("): "),P,t("<"),n(d,{to:"/apidocs/modules.html#messageapiresponsebase"},{default:i(()=>[w]),_:1}),t(">")]),F,e("p",null,[j,t("<"),n(d,{to:"/apidocs/modules.html#messageapiresponsebase"},{default:i(()=>[v]),_:1}),t(">")]),N,L,S,e("p",null,[e("a",E,[t("lib/manage-audience/api/manageAudienceBlobClient.ts:68"),n(a)])]),G,H,e("p",null,[t("▸ "),W,t("("),z,t(", "),V,t(", "),q,t("): "),J,t("<"),n(d,{to:"/apidocs/interfaces/ApiResponseType.html"},{default:i(()=>[K]),_:1}),t("<"),n(d,{to:"/apidocs/modules.html#messageapiresponsebase"},{default:i(()=>[O]),_:1}),t(">>")]),Q,e("p",null,[X,t("<"),n(d,{to:"/apidocs/interfaces/ApiResponseType.html"},{default:i(()=>[Y]),_:1}),t("<"),n(d,{to:"/apidocs/modules.html#messageapiresponsebase"},{default:i(()=>[Z]),_:1}),t(">>")]),$,ee,te,e("p",null,[e("a",ne,[t("lib/manage-audience/api/manageAudienceBlobClient.ts:91"),n(a)])]),de,ie,e("p",null,[t("▸ "),ae,t("("),oe,t(", "),se,t(", "),le,t(", "),re,t("): "),ce,t("<"),n(d,{to:"/apidocs/modules/manageAudience.html#createaudiencegroupresponse"},{default:i(()=>[ue]),_:1}),t(">")]),he,e("p",null,[pe,t("<"),n(d,{to:"/apidocs/modules/manageAudience.html#createaudiencegroupresponse"},{default:i(()=>[fe]),_:1}),t(">")]),_e,ge,be,e("p",null,[e("a",me,[t("lib/manage-audience/api/manageAudienceBlobClient.ts:116"),n(a)])]),xe,ye,e("p",null,[t("▸ "),Ae,t("("),Ie,t(", "),Ce,t(", "),Te,t(", "),De,t("): "),Be,t("<"),n(d,{to:"/apidocs/interfaces/ApiResponseType.html"},{default:i(()=>[Me]),_:1}),t("<"),n(d,{to:"/apidocs/modules/manageAudience.html#createaudiencegroupresponse"},{default:i(()=>[Re]),_:1}),t(">>")]),Ue,e("p",null,[ke,t("<"),n(d,{to:"/apidocs/interfaces/ApiResponseType.html"},{default:i(()=>[Pe]),_:1}),t("<"),n(d,{to:"/apidocs/modules/manageAudience.html#createaudiencegroupresponse"},{default:i(()=>[we]),_:1}),t(">>")]),Fe,je,ve,e("p",null,[e("a",Ne,[t("lib/manage-audience/api/manageAudienceBlobClient.ts:142"),n(a)])])])}const He=l(u,[["render",Le],["__file","manageAudience.ManageAudienceBlobClient.html.vue"]]);export{He as default};
